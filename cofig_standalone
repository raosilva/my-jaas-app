<security-domain name="my-jaas-domain">
    <authentication>
        <login-module code="com.example.security.SimpleLoginModule" flag="required"/>
    </authentication>
</security-domain>

private Principal userPrincipal;
private boolean loginSuccess = false;

@Override
public boolean login() throws LoginException {
    if (callbackHandler == null) {
        throw new LoginException("No CallbackHandler available");
    }

    NameCallback nameCb = new NameCallback("Username: ");
    PasswordCallback passCb = new PasswordCallback("Password: ", false);
    Callback[] callbacks = new Callback[]{nameCb, passCb};

    try {
        callbackHandler.handle(callbacks);
        username = nameCb.getName();
        password = new String(passCb.getPassword());

        if ("admin".equals(username) && "admin123".equals(password)) {
            userPrincipal = new SimplePrincipal(username);
            loginSuccess = true;
            return true;
        } else {
            throw new FailedLoginException("Invalid credentials");
        }
    } catch (Exception e) {
        throw new LoginException("Error during login: " + e.getMessage());
    }
}

@Override
public boolean commit() throws LoginException {
    if (loginSuccess) {
        subject.getPrincipals().add(userPrincipal);
        return true;
    }
    return false;
}


import java.security.Principal;
import java.util.Enumeration;
import java.util.Vector;

public class SimpleGroup implements java.security.acl.Group {
    private String name;
    private Vector<Principal> members = new Vector<>();

    public SimpleGroup(String name) {
        this.name = name;
    }

    @Override
    public boolean addMember(Principal user) {
        return members.add(user);
    }

    @Override
    public boolean removeMember(Principal user) {
        return members.remove(user);
    }

    @Override
    public boolean isMember(Principal member) {
        return members.contains(member);
    }

    @Override
    public Enumeration<? extends Principal> members() {
        return members.elements();
    }

    @Override
    public String getName() {
        return name;
    }
}




<security-domain name="saml-security-domain" cache-type="default">
    <authentication>
        <login-module code="org.picketlink.identity.federation.bindings.jboss.auth.SAML2LoginModule" flag="required">
            <module-option name="roleKey" value="Roles"/>
            <module-option name="principalNamePolicy" value="FROM_NAME_ID"/>
        </login-module>
    </authentication>
</security-domain>



<jboss-web>
    <security-domain>java:/jaas/saml-security-domain</security-domain>
</jboss-web>


<login-config>
    <auth-method>FORM</auth-method>
    <realm-name>SAMLRealm</realm-name>
</login-config>


<deployment>
    <dependencies>
        <module name="org.picketlink.identity.federation.bindings"/>
    </dependencies>
</deployment>


<filter>
    <filter-name>PicketLink Federation Filter</filter-name>
    <filter-class>org.picketlink.servlet.PicketLinkServletFilter</filter-class>
</filter>
<filter-mapping>
    <filter-name>PicketLink Federation Filter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>
